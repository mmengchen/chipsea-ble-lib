package com.mchen.myapplication.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import com.mchen.myapplication.Times;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "TIMES".
 */
public class TimesDao extends AbstractDao<Times, Long> {

    public static final String TABLENAME = "TIMES";

    /**
     * Properties of entity Times.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Type = new Property(1, String.class, "type", false, "TYPE");
        public final static Property Times = new Property(2, String.class, "times", false, "TIMES");
        public final static Property ElapsedTime = new Property(3, Integer.class, "elapsedTime", false, "ELAPSED_TIME");
    }


    public TimesDao(DaoConfig config) {
        super(config);
    }

    public TimesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"TIMES\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TYPE\" TEXT," + // 1: type
                "\"TIMES\" TEXT," + // 2: times
                "\"ELAPSED_TIME\" INTEGER);"); // 3: elapsedTime
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TIMES\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Times entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        String type = entity.getType();
        if (type != null) {
            stmt.bindString(2, type);
        }

        String times = entity.getTimes();
        if (times != null) {
            stmt.bindString(3, times);
        }

        Integer elapsedTime = entity.getElapsedTime();
        if (elapsedTime != null) {
            stmt.bindLong(4, elapsedTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Times entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        String type = entity.getType();
        if (type != null) {
            stmt.bindString(2, type);
        }

        String times = entity.getTimes();
        if (times != null) {
            stmt.bindString(3, times);
        }

        Integer elapsedTime = entity.getElapsedTime();
        if (elapsedTime != null) {
            stmt.bindLong(4, elapsedTime);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    @Override
    public Times readEntity(Cursor cursor, int offset) {
        Times entity = new Times( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // type
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // times
                cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3) // elapsedTime
        );
        return entity;
    }

    @Override
    public void readEntity(Cursor cursor, Times entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setType(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTimes(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setElapsedTime(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
    }

    @Override
    protected final Long updateKeyAfterInsert(Times entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    @Override
    public Long getKey(Times entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Times entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }

}
